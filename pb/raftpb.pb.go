// Code generated by protoc-gen-go. DO NOT EDIT.
// source: raftpb.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	raftpb.proto

It has these top-level messages:
	LogEntry
	RequestVoteReq
	RequestVoteResp
	AppendEntryReq
	AppendEntryResp
	InstallSnapshotReq
	InstallSnapshotResp
	Message
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Different trypes of messages raft can send (More to be added as progress is made)
type MessageType int32

const (
	MessageType_AppendReq  MessageType = 0
	MessageType_AppendResp MessageType = 1
	MessageType_VoteReq    MessageType = 2
	MessageType_VoteResp   MessageType = 3
	MessageType_Other      MessageType = 4
)

var MessageType_name = map[int32]string{
	0: "AppendReq",
	1: "AppendResp",
	2: "VoteReq",
	3: "VoteResp",
	4: "Other",
}
var MessageType_value = map[string]int32{
	"AppendReq":  0,
	"AppendResp": 1,
	"VoteReq":    2,
	"VoteResp":   3,
	"Other":      4,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Define a Log Entry
type LogEntry struct {
	Key   []byte `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Val   []byte `protobuf:"bytes,2,opt,name=Val,proto3" json:"Val,omitempty"`
	Index int64  `protobuf:"varint,3,opt,name=Index" json:"Index,omitempty"`
	Term  int64  `protobuf:"varint,4,opt,name=Term" json:"Term,omitempty"`
}

func (m *LogEntry) Reset()                    { *m = LogEntry{} }
func (m *LogEntry) String() string            { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()               {}
func (*LogEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LogEntry) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *LogEntry) GetVal() []byte {
	if m != nil {
		return m.Val
	}
	return nil
}

func (m *LogEntry) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *LogEntry) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

// Request Vote Request
type RequestVoteReq struct {
	Term         int64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	CandidateId  int64 `protobuf:"varint,2,opt,name=candidateId" json:"candidateId,omitempty"`
	LastLogIndex int64 `protobuf:"varint,3,opt,name=lastLogIndex" json:"lastLogIndex,omitempty"`
	LastLogTerm  int64 `protobuf:"varint,4,opt,name=lastLogTerm" json:"lastLogTerm,omitempty"`
}

func (m *RequestVoteReq) Reset()                    { *m = RequestVoteReq{} }
func (m *RequestVoteReq) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteReq) ProtoMessage()               {}
func (*RequestVoteReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RequestVoteReq) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteReq) GetCandidateId() int64 {
	if m != nil {
		return m.CandidateId
	}
	return 0
}

func (m *RequestVoteReq) GetLastLogIndex() int64 {
	if m != nil {
		return m.LastLogIndex
	}
	return 0
}

func (m *RequestVoteReq) GetLastLogTerm() int64 {
	if m != nil {
		return m.LastLogTerm
	}
	return 0
}

// Request Vote Response
type RequestVoteResp struct {
	Term        int64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	VoteGranted bool  `protobuf:"varint,2,opt,name=voteGranted" json:"voteGranted,omitempty"`
}

func (m *RequestVoteResp) Reset()                    { *m = RequestVoteResp{} }
func (m *RequestVoteResp) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteResp) ProtoMessage()               {}
func (*RequestVoteResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RequestVoteResp) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteResp) GetVoteGranted() bool {
	if m != nil {
		return m.VoteGranted
	}
	return false
}

// Append Entry Request
type AppendEntryReq struct {
	Term         int64       `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	LeaderId     int64       `protobuf:"varint,2,opt,name=leaderId" json:"leaderId,omitempty"`
	PrevLogIndex int64       `protobuf:"varint,3,opt,name=prevLogIndex" json:"prevLogIndex,omitempty"`
	PrevLogTerm  int64       `protobuf:"varint,4,opt,name=prevLogTerm" json:"prevLogTerm,omitempty"`
	Entries      []*LogEntry `protobuf:"bytes,5,rep,name=entries" json:"entries,omitempty"`
	LeaderCommit int64       `protobuf:"varint,6,opt,name=leaderCommit" json:"leaderCommit,omitempty"`
}

func (m *AppendEntryReq) Reset()                    { *m = AppendEntryReq{} }
func (m *AppendEntryReq) String() string            { return proto.CompactTextString(m) }
func (*AppendEntryReq) ProtoMessage()               {}
func (*AppendEntryReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AppendEntryReq) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntryReq) GetLeaderId() int64 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

func (m *AppendEntryReq) GetPrevLogIndex() int64 {
	if m != nil {
		return m.PrevLogIndex
	}
	return 0
}

func (m *AppendEntryReq) GetPrevLogTerm() int64 {
	if m != nil {
		return m.PrevLogTerm
	}
	return 0
}

func (m *AppendEntryReq) GetEntries() []*LogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *AppendEntryReq) GetLeaderCommit() int64 {
	if m != nil {
		return m.LeaderCommit
	}
	return 0
}

// Append Entry Response
type AppendEntryResp struct {
	Term    int64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	Success bool  `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *AppendEntryResp) Reset()                    { *m = AppendEntryResp{} }
func (m *AppendEntryResp) String() string            { return proto.CompactTextString(m) }
func (*AppendEntryResp) ProtoMessage()               {}
func (*AppendEntryResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AppendEntryResp) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntryResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// Install Snapshot Request
type InstallSnapshotReq struct {
	Term              int64    `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	LeaderId          int64    `protobuf:"varint,2,opt,name=leaderId" json:"leaderId,omitempty"`
	LastIncludedIndex int64    `protobuf:"varint,3,opt,name=lastIncludedIndex" json:"lastIncludedIndex,omitempty"`
	LastIncludedterm  int64    `protobuf:"varint,4,opt,name=lastIncludedterm" json:"lastIncludedterm,omitempty"`
	Offset            []byte   `protobuf:"bytes,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Data              [][]byte `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"`
	Done              bool     `protobuf:"varint,7,opt,name=done" json:"done,omitempty"`
}

func (m *InstallSnapshotReq) Reset()                    { *m = InstallSnapshotReq{} }
func (m *InstallSnapshotReq) String() string            { return proto.CompactTextString(m) }
func (*InstallSnapshotReq) ProtoMessage()               {}
func (*InstallSnapshotReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *InstallSnapshotReq) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *InstallSnapshotReq) GetLeaderId() int64 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

func (m *InstallSnapshotReq) GetLastIncludedIndex() int64 {
	if m != nil {
		return m.LastIncludedIndex
	}
	return 0
}

func (m *InstallSnapshotReq) GetLastIncludedterm() int64 {
	if m != nil {
		return m.LastIncludedterm
	}
	return 0
}

func (m *InstallSnapshotReq) GetOffset() []byte {
	if m != nil {
		return m.Offset
	}
	return nil
}

func (m *InstallSnapshotReq) GetData() [][]byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *InstallSnapshotReq) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

// Install Snapshot Response
type InstallSnapshotResp struct {
	Term int64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
}

func (m *InstallSnapshotResp) Reset()                    { *m = InstallSnapshotResp{} }
func (m *InstallSnapshotResp) String() string            { return proto.CompactTextString(m) }
func (*InstallSnapshotResp) ProtoMessage()               {}
func (*InstallSnapshotResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *InstallSnapshotResp) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

// Defines a raft Message
type Message struct {
	Type MessageType `protobuf:"varint,1,opt,name=type,enum=pb.MessageType" json:"type,omitempty"`
	Term int64       `protobuf:"varint,2,opt,name=term" json:"term,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Message) GetType() MessageType {
	if m != nil {
		return m.Type
	}
	return MessageType_AppendReq
}

func (m *Message) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func init() {
	proto.RegisterType((*LogEntry)(nil), "pb.LogEntry")
	proto.RegisterType((*RequestVoteReq)(nil), "pb.RequestVoteReq")
	proto.RegisterType((*RequestVoteResp)(nil), "pb.RequestVoteResp")
	proto.RegisterType((*AppendEntryReq)(nil), "pb.AppendEntryReq")
	proto.RegisterType((*AppendEntryResp)(nil), "pb.AppendEntryResp")
	proto.RegisterType((*InstallSnapshotReq)(nil), "pb.InstallSnapshotReq")
	proto.RegisterType((*InstallSnapshotResp)(nil), "pb.InstallSnapshotResp")
	proto.RegisterType((*Message)(nil), "pb.Message")
	proto.RegisterEnum("pb.MessageType", MessageType_name, MessageType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Raft service

type RaftClient interface {
	//  Request Vote RPC for candidates
	RequestVote(ctx context.Context, in *RequestVoteReq, opts ...grpc.CallOption) (*RequestVoteResp, error)
	// Append Entry RPC for replicating log entry in followers
	AppendEntry(ctx context.Context, in *AppendEntryReq, opts ...grpc.CallOption) (*AppendEntryResp, error)
	// Install Snapshot RPC for replicating statemachine from snapshot and truncating log
	InstallSnapshpot(ctx context.Context, in *InstallSnapshotReq, opts ...grpc.CallOption) (*InstallSnapshotResp, error)
}

type raftClient struct {
	cc *grpc.ClientConn
}

func NewRaftClient(cc *grpc.ClientConn) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) RequestVote(ctx context.Context, in *RequestVoteReq, opts ...grpc.CallOption) (*RequestVoteResp, error) {
	out := new(RequestVoteResp)
	err := grpc.Invoke(ctx, "/pb.Raft/RequestVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) AppendEntry(ctx context.Context, in *AppendEntryReq, opts ...grpc.CallOption) (*AppendEntryResp, error) {
	out := new(AppendEntryResp)
	err := grpc.Invoke(ctx, "/pb.Raft/AppendEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) InstallSnapshpot(ctx context.Context, in *InstallSnapshotReq, opts ...grpc.CallOption) (*InstallSnapshotResp, error) {
	out := new(InstallSnapshotResp)
	err := grpc.Invoke(ctx, "/pb.Raft/InstallSnapshpot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Raft service

type RaftServer interface {
	//  Request Vote RPC for candidates
	RequestVote(context.Context, *RequestVoteReq) (*RequestVoteResp, error)
	// Append Entry RPC for replicating log entry in followers
	AppendEntry(context.Context, *AppendEntryReq) (*AppendEntryResp, error)
	// Install Snapshot RPC for replicating statemachine from snapshot and truncating log
	InstallSnapshpot(context.Context, *InstallSnapshotReq) (*InstallSnapshotResp, error)
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Raft/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).RequestVote(ctx, req.(*RequestVoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_AppendEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).AppendEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Raft/AppendEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).AppendEntry(ctx, req.(*AppendEntryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_InstallSnapshpot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallSnapshotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).InstallSnapshpot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Raft/InstallSnapshpot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).InstallSnapshpot(ctx, req.(*InstallSnapshotReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestVote",
			Handler:    _Raft_RequestVote_Handler,
		},
		{
			MethodName: "AppendEntry",
			Handler:    _Raft_AppendEntry_Handler,
		},
		{
			MethodName: "InstallSnapshpot",
			Handler:    _Raft_InstallSnapshpot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raftpb.proto",
}

func init() { proto.RegisterFile("raftpb.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 545 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xae, 0xe3, 0xfc, 0x75, 0x62, 0x52, 0x33, 0x45, 0xc5, 0xca, 0x29, 0x32, 0x12, 0x0a, 0x15,
	0xca, 0x21, 0x5c, 0xb8, 0x21, 0x40, 0x55, 0x15, 0x51, 0x84, 0xb4, 0x54, 0x11, 0xd7, 0x4d, 0x3c,
	0x49, 0x23, 0x39, 0xde, 0x8d, 0x77, 0x53, 0x91, 0x77, 0xe0, 0xa5, 0x78, 0x05, 0x1e, 0x80, 0x67,
	0x41, 0xbb, 0x76, 0xd2, 0x75, 0xd3, 0x5c, 0xb8, 0xcd, 0x7c, 0x33, 0x9e, 0x9d, 0xef, 0x9b, 0x19,
	0x43, 0x90, 0xf3, 0xb9, 0x96, 0xd3, 0xa1, 0xcc, 0x85, 0x16, 0x58, 0x93, 0xd3, 0xf8, 0x07, 0xb4,
	0x6f, 0xc4, 0xe2, 0x2a, 0xd3, 0xf9, 0x16, 0x43, 0xf0, 0xbf, 0xd0, 0x36, 0xf2, 0xfa, 0xde, 0x20,
	0x60, 0xc6, 0x34, 0xc8, 0x84, 0xa7, 0x51, 0xad, 0x40, 0x26, 0x3c, 0xc5, 0x17, 0xd0, 0x18, 0x67,
	0x09, 0xfd, 0x8c, 0xfc, 0xbe, 0x37, 0xf0, 0x59, 0xe1, 0x20, 0x42, 0xfd, 0x96, 0xf2, 0x55, 0x54,
	0xb7, 0xa0, 0xb5, 0xe3, 0x5f, 0x1e, 0x74, 0x19, 0xad, 0x37, 0xa4, 0xf4, 0x44, 0x68, 0x62, 0xb4,
	0x36, 0x69, 0xda, 0xa4, 0x79, 0x45, 0x9a, 0xb1, 0xb1, 0x0f, 0x9d, 0x19, 0xcf, 0x92, 0x65, 0xc2,
	0x35, 0x8d, 0x13, 0xfb, 0x94, 0xcf, 0x5c, 0x08, 0x63, 0x08, 0x52, 0xae, 0xf4, 0x8d, 0x58, 0xb8,
	0x2f, 0x57, 0x30, 0x53, 0xa5, 0xf4, 0x9d, 0x3e, 0x5c, 0x28, 0xbe, 0x86, 0xb3, 0x4a, 0x37, 0x4a,
	0x1e, 0x6b, 0xe7, 0x5e, 0x68, 0xba, 0xce, 0x79, 0xa6, 0xa9, 0x68, 0xa7, 0xcd, 0x5c, 0x28, 0xfe,
	0xe3, 0x41, 0xf7, 0xa3, 0x94, 0x94, 0x25, 0x56, 0xb5, 0x63, 0xbc, 0x7a, 0xd0, 0x4e, 0x89, 0x27,
	0x94, 0xef, 0x49, 0xed, 0x7d, 0xc3, 0x48, 0xe6, 0x74, 0xff, 0x98, 0x91, 0x8b, 0x99, 0x46, 0x4a,
	0xdf, 0x65, 0xe4, 0x40, 0xf8, 0x1a, 0x5a, 0x94, 0xe9, 0x7c, 0x49, 0x2a, 0x6a, 0xf4, 0xfd, 0x41,
	0x67, 0x14, 0x0c, 0xe5, 0x74, 0xb8, 0x9b, 0x26, 0xdb, 0x05, 0xad, 0x7e, 0xf6, 0xe5, 0xcf, 0x62,
	0xb5, 0x5a, 0xea, 0xa8, 0x59, 0xea, 0xe7, 0x60, 0xf1, 0x07, 0x38, 0xab, 0x70, 0x3a, 0xa2, 0x4e,
	0x04, 0x2d, 0xb5, 0x99, 0xcd, 0x48, 0xa9, 0x52, 0x99, 0x9d, 0x1b, 0xff, 0xf5, 0x00, 0xc7, 0x99,
	0xd2, 0x3c, 0x4d, 0xbf, 0x67, 0x5c, 0xaa, 0x3b, 0xa1, 0xff, 0x47, 0x99, 0xb7, 0xf0, 0xdc, 0x0c,
	0x6d, 0x9c, 0xcd, 0xd2, 0x4d, 0x42, 0x89, 0x2b, 0xcf, 0x61, 0x00, 0x2f, 0x21, 0x74, 0x41, 0xfd,
	0x20, 0xd4, 0x01, 0x8e, 0x17, 0xd0, 0x14, 0xf3, 0xb9, 0x22, 0x1d, 0x35, 0xec, 0x36, 0x97, 0x9e,
	0xe9, 0x30, 0xe1, 0x9a, 0x47, 0xcd, 0xbe, 0x3f, 0x08, 0x98, 0xb5, 0x2d, 0x26, 0x32, 0x8a, 0x5a,
	0x96, 0xa3, 0xb5, 0xe3, 0x37, 0x70, 0x7e, 0xc0, 0xef, 0x69, 0x95, 0xe2, 0x4f, 0xd0, 0xfa, 0x4a,
	0x4a, 0xf1, 0x05, 0xe1, 0x2b, 0xa8, 0xeb, 0xad, 0x24, 0x1b, 0xee, 0x8e, 0xce, 0xcc, 0x80, 0xca,
	0xd0, 0xed, 0x56, 0x12, 0xb3, 0xc1, 0x7d, 0x8d, 0xda, 0x43, 0x8d, 0x4b, 0x06, 0x1d, 0x27, 0x11,
	0x9f, 0xc1, 0x69, 0x31, 0x1f, 0x46, 0xeb, 0xf0, 0x04, 0xbb, 0x00, 0x3b, 0x57, 0xc9, 0xd0, 0xc3,
	0x0e, 0xb4, 0xca, 0x1b, 0x0b, 0x6b, 0x18, 0x40, 0x7b, 0xb7, 0xe2, 0xa1, 0x8f, 0xa7, 0xd0, 0xf8,
	0xa6, 0xef, 0x28, 0x0f, 0xeb, 0xa3, 0xdf, 0x1e, 0xd4, 0x19, 0x9f, 0x6b, 0x7c, 0x0f, 0x1d, 0xe7,
	0x16, 0x10, 0x4d, 0x5b, 0xd5, 0x53, 0xed, 0x9d, 0x1f, 0x60, 0x4a, 0xc6, 0x27, 0xe6, 0x4b, 0x67,
	0x4f, 0x8a, 0x2f, 0xab, 0xc7, 0x50, 0x7c, 0xf9, 0x68, 0x99, 0xe2, 0x13, 0xbc, 0x82, 0xb0, 0xa2,
	0x9f, 0x14, 0x1a, 0x2f, 0x4c, 0xea, 0xe1, 0xd6, 0xf4, 0x5e, 0x3e, 0x89, 0x9b, 0x32, 0xd3, 0xa6,
	0xfd, 0x75, 0xbd, 0xfb, 0x17, 0x00, 0x00, 0xff, 0xff, 0x52, 0xf7, 0xb7, 0xa3, 0xca, 0x04, 0x00,
	0x00,
}
